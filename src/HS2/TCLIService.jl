#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING



# types encapsulating arguments and return values of method OpenSession

mutable struct OpenSession_args <: Thrift.TMsg
  req::TOpenSessionReq
  OpenSession_args() = (o=new(); fillunset(o); o)
end # mutable struct OpenSession_args

mutable struct OpenSession_result
  success::TOpenSessionResp
  OpenSession_result() = (o=new(); fillunset(o); o)
  OpenSession_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct OpenSession_result
meta(t::Type{OpenSession_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method CloseSession

mutable struct CloseSession_args <: Thrift.TMsg
  req::TCloseSessionReq
  CloseSession_args() = (o=new(); fillunset(o); o)
end # mutable struct CloseSession_args

mutable struct CloseSession_result
  success::TCloseSessionResp
  CloseSession_result() = (o=new(); fillunset(o); o)
  CloseSession_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct CloseSession_result
meta(t::Type{CloseSession_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetInfo

mutable struct GetInfo_args <: Thrift.TMsg
  req::TGetInfoReq
  GetInfo_args() = (o=new(); fillunset(o); o)
end # mutable struct GetInfo_args

mutable struct GetInfo_result
  success::TGetInfoResp
  GetInfo_result() = (o=new(); fillunset(o); o)
  GetInfo_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetInfo_result
meta(t::Type{GetInfo_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method ExecuteStatement

mutable struct ExecuteStatement_args <: Thrift.TMsg
  req::TExecuteStatementReq
  ExecuteStatement_args() = (o=new(); fillunset(o); o)
end # mutable struct ExecuteStatement_args

mutable struct ExecuteStatement_result
  success::TExecuteStatementResp
  ExecuteStatement_result() = (o=new(); fillunset(o); o)
  ExecuteStatement_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct ExecuteStatement_result
meta(t::Type{ExecuteStatement_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetTypeInfo

mutable struct GetTypeInfo_args <: Thrift.TMsg
  req::TGetTypeInfoReq
  GetTypeInfo_args() = (o=new(); fillunset(o); o)
end # mutable struct GetTypeInfo_args

mutable struct GetTypeInfo_result
  success::TGetTypeInfoResp
  GetTypeInfo_result() = (o=new(); fillunset(o); o)
  GetTypeInfo_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetTypeInfo_result
meta(t::Type{GetTypeInfo_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetCatalogs

mutable struct GetCatalogs_args <: Thrift.TMsg
  req::TGetCatalogsReq
  GetCatalogs_args() = (o=new(); fillunset(o); o)
end # mutable struct GetCatalogs_args

mutable struct GetCatalogs_result
  success::TGetCatalogsResp
  GetCatalogs_result() = (o=new(); fillunset(o); o)
  GetCatalogs_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetCatalogs_result
meta(t::Type{GetCatalogs_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetSchemas

mutable struct GetSchemas_args <: Thrift.TMsg
  req::TGetSchemasReq
  GetSchemas_args() = (o=new(); fillunset(o); o)
end # mutable struct GetSchemas_args

mutable struct GetSchemas_result
  success::TGetSchemasResp
  GetSchemas_result() = (o=new(); fillunset(o); o)
  GetSchemas_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetSchemas_result
meta(t::Type{GetSchemas_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetTables

mutable struct GetTables_args <: Thrift.TMsg
  req::TGetTablesReq
  GetTables_args() = (o=new(); fillunset(o); o)
end # mutable struct GetTables_args

mutable struct GetTables_result
  success::TGetTablesResp
  GetTables_result() = (o=new(); fillunset(o); o)
  GetTables_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetTables_result
meta(t::Type{GetTables_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetTableTypes

mutable struct GetTableTypes_args <: Thrift.TMsg
  req::TGetTableTypesReq
  GetTableTypes_args() = (o=new(); fillunset(o); o)
end # mutable struct GetTableTypes_args

mutable struct GetTableTypes_result
  success::TGetTableTypesResp
  GetTableTypes_result() = (o=new(); fillunset(o); o)
  GetTableTypes_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetTableTypes_result
meta(t::Type{GetTableTypes_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetColumns

mutable struct GetColumns_args <: Thrift.TMsg
  req::TGetColumnsReq
  GetColumns_args() = (o=new(); fillunset(o); o)
end # mutable struct GetColumns_args

mutable struct GetColumns_result
  success::TGetColumnsResp
  GetColumns_result() = (o=new(); fillunset(o); o)
  GetColumns_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetColumns_result
meta(t::Type{GetColumns_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetFunctions

mutable struct GetFunctions_args <: Thrift.TMsg
  req::TGetFunctionsReq
  GetFunctions_args() = (o=new(); fillunset(o); o)
end # mutable struct GetFunctions_args

mutable struct GetFunctions_result
  success::TGetFunctionsResp
  GetFunctions_result() = (o=new(); fillunset(o); o)
  GetFunctions_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetFunctions_result
meta(t::Type{GetFunctions_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetPrimaryKeys

mutable struct GetPrimaryKeys_args <: Thrift.TMsg
  req::TGetPrimaryKeysReq
  GetPrimaryKeys_args() = (o=new(); fillunset(o); o)
end # mutable struct GetPrimaryKeys_args

mutable struct GetPrimaryKeys_result
  success::TGetPrimaryKeysResp
  GetPrimaryKeys_result() = (o=new(); fillunset(o); o)
  GetPrimaryKeys_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetPrimaryKeys_result
meta(t::Type{GetPrimaryKeys_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetCrossReference

mutable struct GetCrossReference_args <: Thrift.TMsg
  req::TGetCrossReferenceReq
  GetCrossReference_args() = (o=new(); fillunset(o); o)
end # mutable struct GetCrossReference_args

mutable struct GetCrossReference_result
  success::TGetCrossReferenceResp
  GetCrossReference_result() = (o=new(); fillunset(o); o)
  GetCrossReference_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetCrossReference_result
meta(t::Type{GetCrossReference_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetOperationStatus

mutable struct GetOperationStatus_args <: Thrift.TMsg
  req::TGetOperationStatusReq
  GetOperationStatus_args() = (o=new(); fillunset(o); o)
end # mutable struct GetOperationStatus_args

mutable struct GetOperationStatus_result
  success::TGetOperationStatusResp
  GetOperationStatus_result() = (o=new(); fillunset(o); o)
  GetOperationStatus_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetOperationStatus_result
meta(t::Type{GetOperationStatus_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method CancelOperation

mutable struct CancelOperation_args <: Thrift.TMsg
  req::TCancelOperationReq
  CancelOperation_args() = (o=new(); fillunset(o); o)
end # mutable struct CancelOperation_args

mutable struct CancelOperation_result
  success::TCancelOperationResp
  CancelOperation_result() = (o=new(); fillunset(o); o)
  CancelOperation_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct CancelOperation_result
meta(t::Type{CancelOperation_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method CloseOperation

mutable struct CloseOperation_args <: Thrift.TMsg
  req::TCloseOperationReq
  CloseOperation_args() = (o=new(); fillunset(o); o)
end # mutable struct CloseOperation_args

mutable struct CloseOperation_result
  success::TCloseOperationResp
  CloseOperation_result() = (o=new(); fillunset(o); o)
  CloseOperation_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct CloseOperation_result
meta(t::Type{CloseOperation_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetResultSetMetadata

mutable struct GetResultSetMetadata_args <: Thrift.TMsg
  req::TGetResultSetMetadataReq
  GetResultSetMetadata_args() = (o=new(); fillunset(o); o)
end # mutable struct GetResultSetMetadata_args

mutable struct GetResultSetMetadata_result
  success::TGetResultSetMetadataResp
  GetResultSetMetadata_result() = (o=new(); fillunset(o); o)
  GetResultSetMetadata_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetResultSetMetadata_result
meta(t::Type{GetResultSetMetadata_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method FetchResults

mutable struct FetchResults_args <: Thrift.TMsg
  req::TFetchResultsReq
  FetchResults_args() = (o=new(); fillunset(o); o)
end # mutable struct FetchResults_args

mutable struct FetchResults_result
  success::TFetchResultsResp
  FetchResults_result() = (o=new(); fillunset(o); o)
  FetchResults_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct FetchResults_result
meta(t::Type{FetchResults_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetDelegationToken

mutable struct GetDelegationToken_args <: Thrift.TMsg
  req::TGetDelegationTokenReq
  GetDelegationToken_args() = (o=new(); fillunset(o); o)
end # mutable struct GetDelegationToken_args

mutable struct GetDelegationToken_result
  success::TGetDelegationTokenResp
  GetDelegationToken_result() = (o=new(); fillunset(o); o)
  GetDelegationToken_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetDelegationToken_result
meta(t::Type{GetDelegationToken_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method CancelDelegationToken

mutable struct CancelDelegationToken_args <: Thrift.TMsg
  req::TCancelDelegationTokenReq
  CancelDelegationToken_args() = (o=new(); fillunset(o); o)
end # mutable struct CancelDelegationToken_args

mutable struct CancelDelegationToken_result
  success::TCancelDelegationTokenResp
  CancelDelegationToken_result() = (o=new(); fillunset(o); o)
  CancelDelegationToken_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct CancelDelegationToken_result
meta(t::Type{CancelDelegationToken_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method RenewDelegationToken

mutable struct RenewDelegationToken_args <: Thrift.TMsg
  req::TRenewDelegationTokenReq
  RenewDelegationToken_args() = (o=new(); fillunset(o); o)
end # mutable struct RenewDelegationToken_args

mutable struct RenewDelegationToken_result
  success::TRenewDelegationTokenResp
  RenewDelegationToken_result() = (o=new(); fillunset(o); o)
  RenewDelegationToken_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct RenewDelegationToken_result
meta(t::Type{RenewDelegationToken_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method GetQueryId

mutable struct GetQueryId_args <: Thrift.TMsg
  req::TGetQueryIdReq
  GetQueryId_args() = (o=new(); fillunset(o); o)
end # mutable struct GetQueryId_args

mutable struct GetQueryId_result
  success::TGetQueryIdResp
  GetQueryId_result() = (o=new(); fillunset(o); o)
  GetQueryId_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct GetQueryId_result
meta(t::Type{GetQueryId_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())

# types encapsulating arguments and return values of method SetClientInfo

mutable struct SetClientInfo_args <: Thrift.TMsg
  req::TSetClientInfoReq
  SetClientInfo_args() = (o=new(); fillunset(o); o)
end # mutable struct SetClientInfo_args

mutable struct SetClientInfo_result
  success::TSetClientInfoResp
  SetClientInfo_result() = (o=new(); fillunset(o); o)
  SetClientInfo_result(success) = (o=new(); fillset(o, :success); o.success=success; o)
end # mutable struct SetClientInfo_result
meta(t::Type{SetClientInfo_result}) = meta(t, Symbol[:success], Int[0], Dict{Symbol,Any}())



# Processor for TCLIService service (to be used in server implementation)
mutable struct TCLIServiceProcessor <: TProcessor
  tp::ThriftProcessor
  function TCLIServiceProcessor()
    p = new(ThriftProcessor())
    handle(p.tp, ThriftHandler("OpenSession", _OpenSession, OpenSession_args, OpenSession_result))
    handle(p.tp, ThriftHandler("CloseSession", _CloseSession, CloseSession_args, CloseSession_result))
    handle(p.tp, ThriftHandler("GetInfo", _GetInfo, GetInfo_args, GetInfo_result))
    handle(p.tp, ThriftHandler("ExecuteStatement", _ExecuteStatement, ExecuteStatement_args, ExecuteStatement_result))
    handle(p.tp, ThriftHandler("GetTypeInfo", _GetTypeInfo, GetTypeInfo_args, GetTypeInfo_result))
    handle(p.tp, ThriftHandler("GetCatalogs", _GetCatalogs, GetCatalogs_args, GetCatalogs_result))
    handle(p.tp, ThriftHandler("GetSchemas", _GetSchemas, GetSchemas_args, GetSchemas_result))
    handle(p.tp, ThriftHandler("GetTables", _GetTables, GetTables_args, GetTables_result))
    handle(p.tp, ThriftHandler("GetTableTypes", _GetTableTypes, GetTableTypes_args, GetTableTypes_result))
    handle(p.tp, ThriftHandler("GetColumns", _GetColumns, GetColumns_args, GetColumns_result))
    handle(p.tp, ThriftHandler("GetFunctions", _GetFunctions, GetFunctions_args, GetFunctions_result))
    handle(p.tp, ThriftHandler("GetPrimaryKeys", _GetPrimaryKeys, GetPrimaryKeys_args, GetPrimaryKeys_result))
    handle(p.tp, ThriftHandler("GetCrossReference", _GetCrossReference, GetCrossReference_args, GetCrossReference_result))
    handle(p.tp, ThriftHandler("GetOperationStatus", _GetOperationStatus, GetOperationStatus_args, GetOperationStatus_result))
    handle(p.tp, ThriftHandler("CancelOperation", _CancelOperation, CancelOperation_args, CancelOperation_result))
    handle(p.tp, ThriftHandler("CloseOperation", _CloseOperation, CloseOperation_args, CloseOperation_result))
    handle(p.tp, ThriftHandler("GetResultSetMetadata", _GetResultSetMetadata, GetResultSetMetadata_args, GetResultSetMetadata_result))
    handle(p.tp, ThriftHandler("FetchResults", _FetchResults, FetchResults_args, FetchResults_result))
    handle(p.tp, ThriftHandler("GetDelegationToken", _GetDelegationToken, GetDelegationToken_args, GetDelegationToken_result))
    handle(p.tp, ThriftHandler("CancelDelegationToken", _CancelDelegationToken, CancelDelegationToken_args, CancelDelegationToken_result))
    handle(p.tp, ThriftHandler("RenewDelegationToken", _RenewDelegationToken, RenewDelegationToken_args, RenewDelegationToken_result))
    handle(p.tp, ThriftHandler("GetQueryId", _GetQueryId, GetQueryId_args, GetQueryId_result))
    handle(p.tp, ThriftHandler("SetClientInfo", _SetClientInfo, SetClientInfo_args, SetClientInfo_result))
    p
  end
end # mutable struct TCLIServiceProcessor
_OpenSession(inp::OpenSession_args) = OpenSession_result(OpenSession(inp.req))
_CloseSession(inp::CloseSession_args) = CloseSession_result(CloseSession(inp.req))
_GetInfo(inp::GetInfo_args) = GetInfo_result(GetInfo(inp.req))
_ExecuteStatement(inp::ExecuteStatement_args) = ExecuteStatement_result(ExecuteStatement(inp.req))
_GetTypeInfo(inp::GetTypeInfo_args) = GetTypeInfo_result(GetTypeInfo(inp.req))
_GetCatalogs(inp::GetCatalogs_args) = GetCatalogs_result(GetCatalogs(inp.req))
_GetSchemas(inp::GetSchemas_args) = GetSchemas_result(GetSchemas(inp.req))
_GetTables(inp::GetTables_args) = GetTables_result(GetTables(inp.req))
_GetTableTypes(inp::GetTableTypes_args) = GetTableTypes_result(GetTableTypes(inp.req))
_GetColumns(inp::GetColumns_args) = GetColumns_result(GetColumns(inp.req))
_GetFunctions(inp::GetFunctions_args) = GetFunctions_result(GetFunctions(inp.req))
_GetPrimaryKeys(inp::GetPrimaryKeys_args) = GetPrimaryKeys_result(GetPrimaryKeys(inp.req))
_GetCrossReference(inp::GetCrossReference_args) = GetCrossReference_result(GetCrossReference(inp.req))
_GetOperationStatus(inp::GetOperationStatus_args) = GetOperationStatus_result(GetOperationStatus(inp.req))
_CancelOperation(inp::CancelOperation_args) = CancelOperation_result(CancelOperation(inp.req))
_CloseOperation(inp::CloseOperation_args) = CloseOperation_result(CloseOperation(inp.req))
_GetResultSetMetadata(inp::GetResultSetMetadata_args) = GetResultSetMetadata_result(GetResultSetMetadata(inp.req))
_FetchResults(inp::FetchResults_args) = FetchResults_result(FetchResults(inp.req))
_GetDelegationToken(inp::GetDelegationToken_args) = GetDelegationToken_result(GetDelegationToken(inp.req))
_CancelDelegationToken(inp::CancelDelegationToken_args) = CancelDelegationToken_result(CancelDelegationToken(inp.req))
_RenewDelegationToken(inp::RenewDelegationToken_args) = RenewDelegationToken_result(RenewDelegationToken(inp.req))
_GetQueryId(inp::GetQueryId_args) = GetQueryId_result(GetQueryId(inp.req))
_SetClientInfo(inp::SetClientInfo_args) = SetClientInfo_result(SetClientInfo(inp.req))
process(p::TCLIServiceProcessor, inp::TProtocol, outp::TProtocol) = process(p.tp, inp, outp)
distribute(p::TCLIServiceProcessor) = distribute(p.tp)


# Server side methods to be defined by user:
# function OpenSession(req::TOpenSessionReq)
#     # returns TOpenSessionResp
# function CloseSession(req::TCloseSessionReq)
#     # returns TCloseSessionResp
# function GetInfo(req::TGetInfoReq)
#     # returns TGetInfoResp
# function ExecuteStatement(req::TExecuteStatementReq)
#     # returns TExecuteStatementResp
# function GetTypeInfo(req::TGetTypeInfoReq)
#     # returns TGetTypeInfoResp
# function GetCatalogs(req::TGetCatalogsReq)
#     # returns TGetCatalogsResp
# function GetSchemas(req::TGetSchemasReq)
#     # returns TGetSchemasResp
# function GetTables(req::TGetTablesReq)
#     # returns TGetTablesResp
# function GetTableTypes(req::TGetTableTypesReq)
#     # returns TGetTableTypesResp
# function GetColumns(req::TGetColumnsReq)
#     # returns TGetColumnsResp
# function GetFunctions(req::TGetFunctionsReq)
#     # returns TGetFunctionsResp
# function GetPrimaryKeys(req::TGetPrimaryKeysReq)
#     # returns TGetPrimaryKeysResp
# function GetCrossReference(req::TGetCrossReferenceReq)
#     # returns TGetCrossReferenceResp
# function GetOperationStatus(req::TGetOperationStatusReq)
#     # returns TGetOperationStatusResp
# function CancelOperation(req::TCancelOperationReq)
#     # returns TCancelOperationResp
# function CloseOperation(req::TCloseOperationReq)
#     # returns TCloseOperationResp
# function GetResultSetMetadata(req::TGetResultSetMetadataReq)
#     # returns TGetResultSetMetadataResp
# function FetchResults(req::TFetchResultsReq)
#     # returns TFetchResultsResp
# function GetDelegationToken(req::TGetDelegationTokenReq)
#     # returns TGetDelegationTokenResp
# function CancelDelegationToken(req::TCancelDelegationTokenReq)
#     # returns TCancelDelegationTokenResp
# function RenewDelegationToken(req::TRenewDelegationTokenReq)
#     # returns TRenewDelegationTokenResp
# function GetQueryId(req::TGetQueryIdReq)
#     # returns TGetQueryIdResp
# function SetClientInfo(req::TSetClientInfoReq)
#     # returns TSetClientInfoResp


# Client implementation for TCLIService service
mutable struct TCLIServiceClient <: TCLIServiceClientBase
  p::TProtocol
  seqid::Int32
  TCLIServiceClient(p::TProtocol) = new(p, 0)
end # mutable struct TCLIServiceClient

# Client callable method for OpenSession
function OpenSession(c::TCLIServiceClientBase, req::TOpenSessionReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "OpenSession", Thrift.MessageType.CALL, c.seqid)
  inp = OpenSession_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, OpenSession_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function OpenSession

# Client callable method for CloseSession
function CloseSession(c::TCLIServiceClientBase, req::TCloseSessionReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "CloseSession", Thrift.MessageType.CALL, c.seqid)
  inp = CloseSession_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, CloseSession_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function CloseSession

# Client callable method for GetInfo
function GetInfo(c::TCLIServiceClientBase, req::TGetInfoReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetInfo", Thrift.MessageType.CALL, c.seqid)
  inp = GetInfo_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetInfo_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetInfo

# Client callable method for ExecuteStatement
function ExecuteStatement(c::TCLIServiceClientBase, req::TExecuteStatementReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "ExecuteStatement", Thrift.MessageType.CALL, c.seqid)
  inp = ExecuteStatement_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, ExecuteStatement_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function ExecuteStatement

# Client callable method for GetTypeInfo
function GetTypeInfo(c::TCLIServiceClientBase, req::TGetTypeInfoReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetTypeInfo", Thrift.MessageType.CALL, c.seqid)
  inp = GetTypeInfo_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetTypeInfo_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetTypeInfo

# Client callable method for GetCatalogs
function GetCatalogs(c::TCLIServiceClientBase, req::TGetCatalogsReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetCatalogs", Thrift.MessageType.CALL, c.seqid)
  inp = GetCatalogs_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetCatalogs_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetCatalogs

# Client callable method for GetSchemas
function GetSchemas(c::TCLIServiceClientBase, req::TGetSchemasReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetSchemas", Thrift.MessageType.CALL, c.seqid)
  inp = GetSchemas_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetSchemas_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetSchemas

# Client callable method for GetTables
function GetTables(c::TCLIServiceClientBase, req::TGetTablesReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetTables", Thrift.MessageType.CALL, c.seqid)
  inp = GetTables_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetTables_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetTables

# Client callable method for GetTableTypes
function GetTableTypes(c::TCLIServiceClientBase, req::TGetTableTypesReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetTableTypes", Thrift.MessageType.CALL, c.seqid)
  inp = GetTableTypes_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetTableTypes_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetTableTypes

# Client callable method for GetColumns
function GetColumns(c::TCLIServiceClientBase, req::TGetColumnsReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetColumns", Thrift.MessageType.CALL, c.seqid)
  inp = GetColumns_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetColumns_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetColumns

# Client callable method for GetFunctions
function GetFunctions(c::TCLIServiceClientBase, req::TGetFunctionsReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetFunctions", Thrift.MessageType.CALL, c.seqid)
  inp = GetFunctions_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetFunctions_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetFunctions

# Client callable method for GetPrimaryKeys
function GetPrimaryKeys(c::TCLIServiceClientBase, req::TGetPrimaryKeysReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetPrimaryKeys", Thrift.MessageType.CALL, c.seqid)
  inp = GetPrimaryKeys_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetPrimaryKeys_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetPrimaryKeys

# Client callable method for GetCrossReference
function GetCrossReference(c::TCLIServiceClientBase, req::TGetCrossReferenceReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetCrossReference", Thrift.MessageType.CALL, c.seqid)
  inp = GetCrossReference_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetCrossReference_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetCrossReference

# Client callable method for GetOperationStatus
function GetOperationStatus(c::TCLIServiceClientBase, req::TGetOperationStatusReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetOperationStatus", Thrift.MessageType.CALL, c.seqid)
  inp = GetOperationStatus_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetOperationStatus_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetOperationStatus

# Client callable method for CancelOperation
function CancelOperation(c::TCLIServiceClientBase, req::TCancelOperationReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "CancelOperation", Thrift.MessageType.CALL, c.seqid)
  inp = CancelOperation_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, CancelOperation_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function CancelOperation

# Client callable method for CloseOperation
function CloseOperation(c::TCLIServiceClientBase, req::TCloseOperationReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "CloseOperation", Thrift.MessageType.CALL, c.seqid)
  inp = CloseOperation_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, CloseOperation_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function CloseOperation

# Client callable method for GetResultSetMetadata
function GetResultSetMetadata(c::TCLIServiceClientBase, req::TGetResultSetMetadataReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetResultSetMetadata", Thrift.MessageType.CALL, c.seqid)
  inp = GetResultSetMetadata_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetResultSetMetadata_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetResultSetMetadata

# Client callable method for FetchResults
function FetchResults(c::TCLIServiceClientBase, req::TFetchResultsReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "FetchResults", Thrift.MessageType.CALL, c.seqid)
  inp = FetchResults_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, FetchResults_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function FetchResults

# Client callable method for GetDelegationToken
function GetDelegationToken(c::TCLIServiceClientBase, req::TGetDelegationTokenReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetDelegationToken", Thrift.MessageType.CALL, c.seqid)
  inp = GetDelegationToken_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetDelegationToken_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetDelegationToken

# Client callable method for CancelDelegationToken
function CancelDelegationToken(c::TCLIServiceClientBase, req::TCancelDelegationTokenReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "CancelDelegationToken", Thrift.MessageType.CALL, c.seqid)
  inp = CancelDelegationToken_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, CancelDelegationToken_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function CancelDelegationToken

# Client callable method for RenewDelegationToken
function RenewDelegationToken(c::TCLIServiceClientBase, req::TRenewDelegationTokenReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "RenewDelegationToken", Thrift.MessageType.CALL, c.seqid)
  inp = RenewDelegationToken_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, RenewDelegationToken_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function RenewDelegationToken

# Client callable method for GetQueryId
function GetQueryId(c::TCLIServiceClientBase, req::TGetQueryIdReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "GetQueryId", Thrift.MessageType.CALL, c.seqid)
  inp = GetQueryId_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, GetQueryId_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function GetQueryId

# Client callable method for SetClientInfo
function SetClientInfo(c::TCLIServiceClientBase, req::TSetClientInfoReq)
  p = c.p
  c.seqid = (c.seqid < (2^31-1)) ? (c.seqid+1) : 0
  Thrift.writeMessageBegin(p, "SetClientInfo", Thrift.MessageType.CALL, c.seqid)
  inp = SetClientInfo_args()
  Thrift.set_field!(inp, :req, req)
  Thrift.write(p, inp)
  Thrift.writeMessageEnd(p)
  Thrift.flush(p.t)
  
  (fname, mtype, rseqid) = Thrift.readMessageBegin(p)
  (mtype == Thrift.MessageType.EXCEPTION) && throw(Thrift.read(p, Thrift.TApplicationException()))
  outp = Thrift.read(p, SetClientInfo_result())
  Thrift.readMessageEnd(p)
  (rseqid != c.seqid) && throw(Thrift.TApplicationException(ApplicationExceptionType.BAD_SEQUENCE_ID, "response sequence id $rseqid did not match request ($(c.seqid))"))
  Thrift.has_field(outp, :success) && (return Thrift.get_field(outp, :success))
  throw(Thrift.TApplicationException(Thrift.ApplicationExceptionType.MISSING_RESULT, "retrieve failed: unknown result"))
end # function SetClientInfo

